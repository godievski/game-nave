/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;


import Controller.IGestorEnemigos;
import Controller.IGestorNave;
import Model.Nave;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Godievski
 */
public class WindowGame extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    
    protected final DrawingSpace panelDibujo;
    public final GameInterface game;
    public IGestorNave naves;
    public IGestorEnemigos enemies;
    private final Nave nave;
    private boolean keyUp;
    private boolean keyDown;
    private boolean keyLeft;
    private boolean keyRight;
    private boolean spacePressed;
    private boolean mousePressed;
    private boolean specialShoot;
    protected static final int SLEEP_TIME = 10;
    public static final int WINDOW_WIDTH = 400;
    public static final int WINDOW_HEIGHT = 600;
    /**
     * 
     *
     */
   
    /**
     *
     * @param ip
     * @param port
     * @throws java.rmi.RemoteException
     * @throws java.rmi.NotBoundException
     * @throws java.net.MalformedURLException
     * @throws java.net.UnknownHostException
     */
    public WindowGame(String ip, String port) throws RemoteException, NotBoundException, MalformedURLException, UnknownHostException {
        this.initComponents();
        this.setIgnoreRepaint(true);
        this.setBounds(500, 100, 406, 629);
        this.setResizable(false);
        this.createBufferStrategy(2);
        this.setVisible(true);
        this.setTitle("SpaceInvader by Godievski");
        this.setFocusableWindowState(true);
        this.naves = (IGestorNave)Naming.lookup("//"+ip+":"+port+"/Naves");
        this.enemies = (IGestorEnemigos)Naming.lookup("//"+ip+":"+port+"/Enemies");
        this.game = (GameInterface)Naming.lookup("//"+ip+":"+port+"/Game");
        this.nave = this.game.createPlayer();
        this.panelDibujo = new DrawingSpace(this, this.game, this.nave.getID(), new Dimension(400, 600));
        this.panelDibujo.setFocusable(false);
        this.panelDibujo.setIgnoreRepaint(false);
        this.add((Component)this.panelDibujo);
        this.keyDown = false;
        this.keyLeft = false;
        this.keyRight = false;
        this.keyUp = false;
        this.spacePressed = false;
        this.mousePressed = false;
        this.specialShoot = false;
    }
    
    public void startGame() throws RemoteException{
        while(true){
            //INICIALIZACION
            this.initGame();
            while (!this.game.getState()) {
            }
            while (this.naves.isSomeOneAlive()) {
                try {
                    this.game.moverPlayer(this.nave.getID(), this.keyLeft, this.keyRight, this.keyUp, this.keyDown);
                    this.panelDibujo.repaint();
                    Thread.sleep(10);
                }
                catch (InterruptedException ex) {
                    Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.endGame();
        }
    }
        
    public void initGame() throws RemoteException{
        this.game.initGame(this.nave.getID());
        this.game.updateWindowPosition(this.nave.getID(), this.getLocation());
    }
    
    public void endGame() throws RemoteException{
        this.game.endGame(this.nave.getID());
    }
    
    public boolean getMousePressed() {
        return this.mousePressed;
    }

    public void setMousePressed(boolean value) {
        this.mousePressed = value;
    }

    public boolean getSpacePressed() {
        return this.spacePressed;
    }

    public boolean getSpecialShoot() {
        return this.specialShoot;
    }
    
    @Override
    public void paint (Graphics g){
        if (this.panelDibujo != null) {
            this.panelDibujo.paint(g);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        int code = evt.getKeyCode();
        //MOVIMIENTO
        if (code == KeyEvent.VK_A || code == KeyEvent.VK_LEFT)
            this.keyLeft = true;
        if (code == KeyEvent.VK_D || code == KeyEvent.VK_RIGHT)
            this.keyRight = true;
        if (code == KeyEvent.VK_W || code == KeyEvent.VK_UP)
            this.keyUp = true;
        if (code == KeyEvent.VK_S || code == KeyEvent.VK_DOWN)
            this.keyDown = true;

        //DISPARO
        try {
            Nave n = this.naves.get(this.nave.getID());
            if (code == 32 && !n.getMousePressed() && !n.getSpecialShoot()) {
                this.spacePressed = true;
            }
            if (code == 88 && !n.getSpacePressed() && !n.getMousePressed()) {
                this.specialShoot = true;
            }
        }
        catch (RemoteException ex) {
            Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            this.game.setFlags(this.nave.getID(), this.spacePressed, this.mousePressed, this.specialShoot);
        }
        catch (RemoteException ex) {
            Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        int code = evt.getKeyCode();
     //MOVIMIENTO
        if (code == KeyEvent.VK_A || code == KeyEvent.VK_LEFT)
            this.keyLeft = false;
        if (code == KeyEvent.VK_D || code == KeyEvent.VK_RIGHT)
            this.keyRight = false;
        if (code == KeyEvent.VK_W || code == KeyEvent.VK_UP)
            this.keyUp = false;
        if (code == KeyEvent.VK_S || code == KeyEvent.VK_DOWN)
            this.keyDown = false;

        //DISPARO
        if (code == KeyEvent.VK_SPACE){
            this.spacePressed = false;
        }
        if (code == KeyEvent.VK_X){
            this.specialShoot = false;
        }
        try {
            this.game.setFlags(this.nave.getID(), this.spacePressed, this.mousePressed, this.specialShoot);
        }
        catch (RemoteException ex) {
            Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }//GEN-LAST:event_formKeyReleased

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        // TODO add your handling code here:
        try {
            Component c = (Component)evt.getSource();
            Point currentLocationOnScreen = c.getLocationOnScreen();
            System.out.println("Pos: " + currentLocationOnScreen.x + " " + currentLocationOnScreen.y);
            if (this.game != null) {
                this.game.updateWindowPosition(this.nave.getID(), currentLocationOnScreen);
            }
        }
        catch (RemoteException ex2) {
            Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex2);
        }
        catch (IllegalComponentStateException ex2) {
            // empty catch block
        }
    }//GEN-LAST:event_formComponentMoved


    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
